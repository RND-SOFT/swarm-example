before_script: &before_pipeline_script
  # Install ssh-agent if not already installed, it is required by Docker.
  # (change apt-get to yum if you use a CentOS-based image)
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

  # Run ssh-agent (inside the build environment)
  - eval $(ssh-agent -s)

  # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  - echo "$SSH_PRIVATE_KEY" > /tmp/key && chmod 600 /tmp/key && ssh-add /tmp/key && rm /tmp/key

  # For Docker builds disable host key checking. Be aware that by adding that
  # you are suspectible to man-in-the-middle attacks.
  # WARNING: Use this only with the Docker executor, if you use it with shell
  # you will overwrite your user's SSH config.
  - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  - mkdir -p ~/.docker

stages:
  - tests
  - build
  - deploy

test:
  image: pad92/ansible-alpine:latest
  stage: tests
  variables:
    INSTANCE: dev
  script:
    - echo test ok

build:
  image: pad92/ansible-alpine:latest
  stage: build
  script:
    - echo build ok

.deploy:
  image: pad92/ansible-alpine:latest
  stage: deploy
  variables:
    CLOUD: example
    INSTANCE: dev
  script:
    - cd ansible
    - ansible-playbook -i ${CLOUD}.ini -e instance=${INSTANCE} playbook/app.yml -D
  environment:
    name: ${CLOUD}/${INSTANCE}/hello
    url: http://hello.${INSTANCE}.${CLOUD}.local/
    on_stop: stop_example

.deploy_dev_static:
  extends: .deploy
  variables:
    CLOUD: example
    INSTANCE: dev
  environment:
    on_stop: stop:example:dev

.deploy_stage_static:
  extends: .deploy
  variables:
    CLOUD: example
    INSTANCE: stage
  environment:
    on_stop: stop:example:stage

deploy:example:dev:manual:
  extends: .deploy_dev_static
  when: manual

deploy:example:stage:manual:
  extends: .deploy_stage_static
  when: manual


.stop:
  image: pad92/ansible-alpine:latest
  stage: deploy
  script:
    - echo stop
    - echo ${CLOUD}
    - echo ${INSTANCE}
    - cd ansible
    - ansible-playbook -i ${CLOUD}.ini -e instance=${INSTANCE} playbook/app.yml -D -t hello-down
  when: manual
  environment:
    name: ${CLOUD}/${INSTANCE}/hello
    action: stop
  
stop:example:dev:
  extends: .stop
  variables:
    CLOUD: example
    INSTANCE: dev

stop:example:stage:
  extends: .stop
  variables:
    CLOUD: example
    INSTANCE: stage




