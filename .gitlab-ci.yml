before_script: &before_pipeline_script
  # Install ssh-agent if not already installed, it is required by Docker.
  # (change apt-get to yum if you use a CentOS-based image)
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

  # Run ssh-agent (inside the build environment)
  - eval $(ssh-agent -s)

  # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  - echo "$SSH_PRIVATE_KEY" > /tmp/key && chmod 600 /tmp/key && ssh-add /tmp/key && rm /tmp/key

  # For Docker builds disable host key checking. Be aware that by adding that
  # you are suspectible to man-in-the-middle attacks.
  # WARNING: Use this only with the Docker executor, if you use it with shell
  # you will overwrite your user's SSH config.
  - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  - mkdir -p ~/.docker

stages:
  - tests
  - build
  - deploy

test:
  image: pad92/ansible-alpine:latest
  stage: tests
  script:
    - echo test ok
    - cd ansible
    - ssh jerry@172.22.1.11 -C ls
    - ssh -o ProxyCommand="ssh -W %h:%p -q jerry@172.22.1.11" root@192.168.99.104 -C ls || true
    - ansible-playbook -i ${INSTANCE}.ini playbook/app.yml -D

# build:
#   image: pad92/ansible-alpine:latest
#   stage: build
#   script:
#     - echo build ok

# deploy:
#   image: pad92/ansible-alpine:latest
#   stage: deploy
#   variables:
#     INSTANCE: dev
#   script:
#     - cd ansible
#     - ssh jerry@172.22.1.11 -C ls
#     - ssh -o ProxyCommand="ssh -W %h:%p -q jerry@172.22.1.11" root@192.168.99.104 -C ls
#     - ansible-playbook -i ${INSTANCE}.ini playbook/app.yml -D

